---
import portfolio from '@data/portfolio.json';
const { informations_personnelles, liens_professionnels } = portfolio;
---

<section id="accueil" class="relative min-h-screen flex items-center py-16">
  <div class="container mx-auto px-4 relative z-10">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <!-- Left: Text content -->
      <div data-aos="fade-right" data-aos-duration="1000">
        <div class="mb-4">
          <span class="inline-block py-1 px-3 rounded-full bg-primary-100 text-primary-700 dark:bg-primary-900/30 dark:text-primary-300 text-sm font-medium mb-4">
            {informations_personnelles.titre}
          </span>
        </div>
        
        <h1 class="typing-container font-heading font-bold text-4xl md:text-5xl lg:text-6xl mb-6 text-slate-800 dark:text-white">
          <span class="inline-block typing-effect">{informations_personnelles.nom.split(' ')[0]}</span>
          <span class="inline-block text-primary-500">{" " + informations_personnelles.nom.split(' ').slice(1).join(' ')}</span>
        </h1>
        
        <p class="text-lg text-slate-600 dark:text-slate-300 mb-8 leading-relaxed max-w-lg">
          {portfolio.resume_professionnel.description}
        </p>
        
        <div class="flex flex-wrap gap-4">
          <a 
            href="#contact" 
            class="btn-primary inline-flex items-center justify-center px-6 py-3 bg-primary-500 hover:bg-primary-600 text-white font-medium rounded-lg transition-transform hover:scale-105 shadow-md hover:shadow-lg"
          >
            Prendre contact
            <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
            </svg>
          </a>
          
          <a 
            href="#projets" 
            class="btn-secondary inline-flex items-center justify-center px-6 py-3 bg-white dark:bg-slate-800 text-primary-500 border border-primary-500 hover:bg-primary-50 dark:hover:bg-slate-700 font-medium rounded-lg transition-transform hover:scale-105"
          >
            Voir les projets
          </a>
        </div>
        
        <!-- Social links -->
        <div class="mt-8 flex items-center space-x-4">
          <a 
            href={liens_professionnels.github} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-slate-600 dark:text-slate-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
            aria-label="GitHub"
          >
            <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/github/github-original.svg" alt="GitHub" class="w-6 h-6" />
          </a>
          <a 
            href={liens_professionnels.linkedin} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-slate-600 dark:text-slate-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
            aria-label="LinkedIn"
          >
            <img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/linkedin/linkedin-original.svg" alt="LinkedIn" class="w-6 h-6" />
          </a>
          <a 
            href={`mailto:${informations_personnelles.email}`} 
            class="text-slate-600 dark:text-slate-400 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
            aria-label="Email"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
          </a>
        </div>
      </div>
      
      <!-- Right: Profile Image -->
      <div class="flex justify-center lg:justify-end" data-aos="fade-up" data-aos-duration="1000">
        <div class="relative">
          <div class="w-64 h-64 md:w-80 md:h-80 rounded-full overflow-hidden border-4 border-primary-200 dark:border-primary-800 shadow-xl hover:shadow-2xl transition-all duration-500 hover:scale-105">
            <img 
              src={informations_personnelles.photo} 
              alt={informations_personnelles.nom} 
              class="w-full h-full object-cover"
              loading="eager"
            />
          </div>
          
          <!-- Floating badge elements -->
          <div class="absolute -top-4 -right-4 bg-white dark:bg-slate-800 px-4 py-2 rounded-lg shadow-lg">
            <span class="text-primary-600 dark:text-primary-400 font-medium">ML</span>
          </div>
          
          <div class="absolute -bottom-4 -left-4 bg-white dark:bg-slate-800 px-4 py-2 rounded-lg shadow-lg">
            <span class="text-primary-600 dark:text-primary-400 font-medium">AI</span>
          </div>
          
          <div class="absolute bottom-1/2 -right-8 bg-white dark:bg-slate-800 px-3 py-1.5 rounded-lg shadow-lg">
            <span class="text-primary-600 dark:text-primary-400 font-medium">Data</span>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scroll indicator -->
  <div class="absolute bottom-10 left-1/2 transform -translate-x-1/2">
    <a href="#Ã -propos" class="flex flex-col items-center text-slate-500 hover:text-primary-500 transition-colors">
      <span class="text-sm mb-2">Scroll</span>
      <svg class="w-6 h-6 animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </a>
  </div>
</section>

<script>
  // Typing effect for hero text
  document.addEventListener('DOMContentLoaded', function() {
    const typingContainer = document.querySelector('.typing-container');
    
    if (typingContainer) {
      const typingEffect = document.querySelector('.typing-effect');
      const text = typingEffect?.textContent || '';
      
      if (typingEffect && text) {
        typingEffect.textContent = '';
        
        let i = 0;
        function typeWriter() {
          if (i < text.length) {
            typingEffect.textContent += text.charAt(i);
            i++;
            setTimeout(typeWriter, 100);
          }
        }
        
        setTimeout(() => {
          typeWriter();
        }, 500);
      }
    }
  });
</script>