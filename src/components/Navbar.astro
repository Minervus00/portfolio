---
import { Image } from 'astro:assets';
import portfolio from '@data/portfolio.json';

const { sections_portfolio } = portfolio;

// Navigation items with href IDs
const navItems = sections_portfolio.map(section => {
  return {
    name: section,
    href: `#${section.toLowerCase().replace(/\s+/g, '-')}`
  }
});
---

<header class="fixed w-full top-0 z-50 transition-all duration-300" id="main-header">
  <nav class="container mx-auto px-4 py-4 flex items-center justify-between">
    <!-- Logo -->
    <a href="#" class="flex items-center space-x-2">
      <span class="text-xl font-bold font-heading text-primary-500">Alex<span class="text-accent-500">.dev</span></span>
    </a>

    <!-- Desktop Navigation -->
    <div class="hidden md:flex items-center space-x-6">
      {navItems.map(item => (
        <a 
          href={item.href}
          class="nav-link text-slate-700 dark:text-slate-300 hover:text-primary-500 dark:hover:text-primary-400 transition-colors duration-300 font-medium text-sm tracking-wide"
        >
          {item.name}
        </a>
      ))}
      
      <!-- Theme Toggle Button -->
      <button 
        id="theme-toggle" 
        class="p-2 rounded-full bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors duration-300"
        aria-label="Toggle Dark Mode"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 block dark:hidden" viewBox="0 0 20 20" fill="currentColor">
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
        </svg>
      </button>
    </div>
    
    <!-- Mobile Menu Button -->
    <button 
      id="menu-toggle" 
      class="md:hidden p-2 rounded-lg bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors"
      aria-label="Toggle Menu"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </nav>
  
  <!-- Mobile Navigation Menu -->
  <div id="mobile-menu" class="hidden md:hidden bg-white dark:bg-slate-800 shadow-lg absolute w-full">
    <div class="container mx-auto px-4 py-3 flex flex-col space-y-3">
      {navItems.map(item => (
        <a 
          href={item.href}
          class="mobile-nav-link py-2 text-slate-700 dark:text-slate-300 hover:text-primary-500 dark:hover:text-primary-400 transition-colors"
        >
          {item.name}
        </a>
      ))}
      
      <!-- Mobile Theme Toggle -->
      <div class="flex items-center justify-between py-2">
        <span class="text-slate-700 dark:text-slate-300">Mode sombre</span>
        <button 
          id="mobile-theme-toggle" 
          class="p-2 rounded-full bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors"
          aria-label="Toggle Dark Mode"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 block dark:hidden" viewBox="0 0 20 20" fill="currentColor">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<script>
  // Handle scroll behavior for header
  const header = document.getElementById('main-header');
  const scrollThreshold = 50;

  function updateHeaderOnScroll() {
    if (window.scrollY > scrollThreshold) {
      header?.classList.add('bg-white/80', 'dark:bg-slate-900/80', 'backdrop-blur-md', 'shadow-md');
    } else {
      header?.classList.remove('bg-white/80', 'dark:bg-slate-900/80', 'backdrop-blur-md', 'shadow-md');
    }
  }

  // Mobile menu toggle
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
  const mobileThemeToggle = document.getElementById('mobile-theme-toggle');

  menuToggle?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });

  // Close mobile menu when clicking a link
  mobileNavLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
    });
  });

  // Sync theme toggle between desktop and mobile
  mobileThemeToggle?.addEventListener('click', () => {
    document.getElementById('theme-toggle')?.click();
  });

  // Set active nav item based on scroll position
  function setActiveNavItem() {
    const sections = document.querySelectorAll('section[id]');
    const scrollPosition = window.scrollY + 100;

    sections.forEach(section => {
      const sectionTop = (section as HTMLElement).offsetTop;
      const sectionHeight = (section as HTMLElement).offsetHeight;
      const sectionId = section.getAttribute('id');
      
      if (sectionId) {
        const navItems = document.querySelectorAll(`a[href="#${sectionId}"]`);
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          navItems.forEach(item => item.classList.add('text-primary-500', 'font-semibold'));
        } else {
          navItems.forEach(item => item.classList.remove('text-primary-500', 'font-semibold'));
        }
      }
    });
  }

  // Add scroll event listeners
  window.addEventListener('scroll', () => {
    updateHeaderOnScroll();
    setActiveNavItem();
  });

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    updateHeaderOnScroll();
    setActiveNavItem();
  });
</script>